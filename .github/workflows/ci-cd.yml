name: CI/CD Pipeline with SAST

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    # Шаг 1: Получаем код из репозитория
    - name: Checkout code
      uses: actions/checkout@v4

    # Шаг 2: Настраиваем окружение Python
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    # Шаг 3: Устанавливаем зависимости
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8 bandit

    # Шаг 4: Запускаем flake8 для проверки стиля кода
    - name: Run Flake8 Linting
      run: |
        echo "Running flake8 code style check..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # Шаг 5: Запускаем SAST-сканер (Bandit)
    - name: Run Bandit SAST Scan
      run: |
        bandit -r . --severity-level all --confidence-level all -f json -o bandit_results.json || true

    # Шаг 6: Сохраняем Bandit отчет как артефакт
    - name: Upload Bandit Results Artifact
      uses: actions/upload-artifact@v4
      with:
        name: bandit-security-report
        path: bandit_results.json
        retention-days: 30

    # Шаг 7: Анализируем отчет Bandit
    - name: Check Bandit Results
      id: bandit-check
      run: |
        if [ -f bandit_results.json ]; then
          echo "=== Bandit Report Summary ==="
          cat bandit_results.json | python -c "
import json, sys
data = json.load(sys.stdin)
metrics = data.get('metrics', {})
total = data.get('results', [])
high_severity = [r for r in total if r.get('issue_severity') == 'HIGH']
medium_severity = [r for r in total if r.get('issue_severity') == 'MEDIUM']
low_severity = [r for r in total if r.get('issue_severity') == 'LOW']

print(f'Total issues found: {len(total)}')
print(f'High severity: {len(high_severity)}')
print(f'Medium severity: {len(medium_severity)}')
print(f'Low severity: {len(low_severity)}')

# Fail only on HIGH severity issues
if len(high_severity) > 0:
    print('❌ Critical vulnerabilities found! Failing pipeline.')
    sys.exit(1)
else:
    print('✅ No critical vulnerabilities found.')
          "
        else
          echo "Bandit report not found."
          exit 1
        fi

    # Шаг 8: Запускаем сканер зависимостей Trivy
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'HIGH,CRITICAL'

    # Шаг 9: Запускаем unit-тесты
    - name: Run Tests with pytest
      run: |
        python -m pytest tests/ -v

  # Новая задача для сборки (запускается только после успешного security-scan)
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: security-scan  # Зависит от успешного выполнения security-scan
    if: success()  # Запускается только если предыдущая задача успешна
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build and verify application
      run: |
        echo "=== Building application ==="
        python -c "
from app import app
print('✅ Application imported successfully')
print(f'✅ App name: {app.name}')
print('✅ Build completed successfully!')
        "

    - name: Create build artifact
      run: |
        echo "Creating build directory..."
        mkdir -p build
        cp app.py build/
        cp requirements.txt build/
        echo "Build version: $(date +%Y%m%d-%H%M%S)" > build/version.txt
        echo "✅ Build artifacts prepared"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: application-build
        path: build/
        retention-days: 7
