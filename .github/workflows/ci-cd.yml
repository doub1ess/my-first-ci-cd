name: CI/CD Pipeline with SAST

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest bandit

    # Задание 2: Flake8 для проверки стиля кода
    - name: Run Flake8 Linting
      run: |
        pip install flake8
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

    - name: Run Bandit SAST Scan
      run: |
        bandit -r . --severity-level all --confidence-level all -f json -o bandit_results.json || true

    # Задание 1: Сохранение Bandit отчета как артефакта
    - name: Upload Bandit Results Artifact
      uses: actions/upload-artifact@v4
      with:
        name: bandit-security-report
        path: bandit_results.json
        retention-days: 30

    - name: Check Bandit Results
      run: |
        if [ -f bandit_results.json ]; then
          echo "Bandit scan completed. Report saved as artifact."
        else
          echo "Bandit report not found."
          exit 1
        fi

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'HIGH,CRITICAL'

    - name: Run Tests with pytest
      run: |
        python -m pytest tests/ -v

  # Задание 3: Задача для сборки после успешного security-scan
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: security-scan
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build application
      run: |
        echo "Building application..."
        python -c "from app import app; print('Build successful: app imported')"
        echo "Build completed successfully!"
